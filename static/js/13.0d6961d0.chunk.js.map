{"version":3,"sources":["views/Home/components/EarnAssetCard.tsx","views/Home/components/PrinterCard.tsx","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["StyledfarmsStakingCard","styled","Card","theme","mediaQueries","lg","CardMidContent","Heading","attrs","size","EarnAssetCard","color","justifyContent","exact","activeClassName","to","id","mt","PrinterCard","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","Block","div","CardImage","img","Label","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","ptsPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","mb","src","alt","width","height","toFixed","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","ptsPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/13.0d6961d0.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from 'printersharesfinance-uikit'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nconst StyledfarmsStakingCard = styled(Card)`\r\n  background: linear-gradient(#2E6301, #eac625);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: auto;\r\n  margin-bottom: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 54px;\r\n`\r\nconst EarnAssetCard = () => {\r\n\r\n  // Always include CAKE\r\n  const assets = ['$PTS']\r\n\r\n  return (\r\n    <StyledfarmsStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn\r\n        </Heading>\r\n        <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Printers and Papers\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/printers\" id=\"farms-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"secondary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledfarmsStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from 'printersharesfinance-uikit'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nconst StyledfarmsStakingCard = styled(Card)`\r\n  background: linear-gradient(#2E6301, #eac625);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: auto;\r\n  margin-bottom: auto;\r\n  width: 210%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 54px;\r\n`\r\nconst PrinterCard = () => {\r\n\r\n  // Always include CAKE\r\n  const assets = ['Money 💰💰💰 ']\r\n\r\n  return (\r\n    <StyledfarmsStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Print\r\n        </Heading>\r\n        <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n          Go brrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/papers\" id=\"farms-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"secondary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledfarmsStakingCard>\r\n  )\r\n}\r\n\r\nexport default PrinterCard\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingPts',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from 'printersharesfinance-uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from 'printersharesfinance-uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({ earningsSum }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from 'printersharesfinance-uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingPts',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from 'printersharesfinance-uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/pts/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const ptsPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/pts/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'PTS to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum} />\r\n          <Label>~${(ptsPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'PTS in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(ptsPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting PTS')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from 'printersharesfinance-uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms()\r\n  const ptsPrice = usePriceCakeBusd()\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\r\n  const cakeSupply = getBalanceNumber(circSupply)\r\n  const marketCap = ptsPrice.times(circSupply)\r\n\r\n  let ptsPerBlock = 0\r\n  if (farms && farms[0] && farms[0].ptsPerBlock) {\r\n    ptsPerBlock = new BigNumber(farms[0].ptsPerBlock).div(new BigNumber(10).pow(18)).toNumber()\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'Pts Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New PTS/block')}</Text>\r\n          <Text bold fontSize=\"14px\">\r\n            {ptsPerBlock}\r\n          </Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from 'printersharesfinance-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue()\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from 'printersharesfinance-uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'printershares',\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: 'noheader, nofooter',\r\n            width: '400',\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from 'printersharesfinance-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport PrinterCard from 'views/Home/components/PrinterCard'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/pts/3.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pts/3.png'), url('/images/pts/3b.png');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'PrinterShares')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'Yield Farming Protocol on Binance Smart Chain.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard />\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAssetCard />\r\n          <PrinterCard />\r\n        </CTACards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}